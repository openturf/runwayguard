name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.4)'
        required: true
        type: string

jobs:
  validate-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest safety pip-audit

    - name: Validate version format
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        echo "Validating version: $VERSION"
        
        # Check semantic versioning format
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Invalid version format. Must be vX.Y.Z (e.g., v1.0.4)"
          exit 1
        fi
        
        echo "‚úÖ Version format valid: $VERSION"
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Run comprehensive security scan
      run: |
        echo "üîç Running pre-release security scan..."
        
        # Security vulnerability check
        safety check -r requirements.txt
        pip-audit --desc
        
        echo "‚úÖ Security scan passed"

    - name: Run full test suite
      run: |
        echo "üß™ Running comprehensive test suite..."
        
        # Create test environment
        echo "FAA_API=https://aviationweather.gov/api/data" > .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "OPENAI_API_KEY=test-key" >> .env
        
        # Test core aviation calculations
        python -c "
        from functions.core_calculations import calculate_rri, calculate_advanced_rri, wind_components, density_alt
        
        # Test wind components
        head, cross, is_head = wind_components(90, 120, 15)
        assert head > 0 and cross > 0, 'Wind calculation failed'
        
        # Test density altitude
        da = density_alt(1000, 25, 29.92)
        assert da > 1000, 'Density altitude failed'
        
        print('‚úÖ Core aviation calculations validated')
        "
        
        echo "‚úÖ Test suite passed"

    - name: Validate changelog
      run: |
        if [ ! -f ".github/CHANGELOG.md" ]; then
          echo "‚ùå CHANGELOG.md not found"
          exit 1
        fi
        
        # Check if version is documented in changelog
        if ! grep -q "$RELEASE_VERSION" .github/CHANGELOG.md; then
          echo "‚ö†Ô∏è Version $RELEASE_VERSION not found in CHANGELOG.md"
          echo "Please update the changelog before releasing"
          exit 1
        fi
        
        echo "‚úÖ Changelog validation passed"

  create-release:
    needs: validate-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set release version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Extract changelog for this version
      run: |
        # Extract changelog content for this version
        python -c "
        import re
        
        with open('.github/CHANGELOG.md', 'r') as f:
            content = f.read()
        
        # Find the section for this version
        version = '${{ env.RELEASE_VERSION }}'
        pattern = rf'## \[.*?\] ‚Äì \d{{4}}-\d{{2}}-\d{{2}}'
        
        sections = re.split(pattern, content)
        
        # Find version section (look for version number in first few sections)
        release_notes = ''
        for i, section in enumerate(sections[1:], 1):
            if version.replace('v', '') in sections[i-1] or version in content:
                lines = section.split('\n')
                # Take content until next version or end
                for line in lines:
                    if line.strip().startswith('## [') and 'CHANGELOG' not in line:
                        break
                    if line.strip() and not line.startswith('---'):
                        release_notes += line + '\n'
                break
        
        if not release_notes.strip():
            release_notes = f'Release {version}\n\nSee CHANGELOG.md for details.'
        
        with open('release_notes.md', 'w') as f:
            f.write(release_notes.strip())
        
        print('Release notes extracted')
        "

    - name: Build release assets
      run: |
        echo "üì¶ Building release assets..."
        
        # Create release directory
        mkdir -p release_assets
        
        # Create source archive
        git archive --format=tar.gz --prefix=runwayguard-${{ env.RELEASE_VERSION }}/ HEAD > release_assets/runwayguard-${{ env.RELEASE_VERSION }}-source.tar.gz
        
        # Create installation package
        cp requirements.txt release_assets/
        cp README.md release_assets/
        cp LICENSE.md release_assets/
        
        # Create aviation safety documentation package
        mkdir -p release_assets/docs
        cp docs/algorithm.md release_assets/docs/
        cp docs/advanced_risk_analysis.md release_assets/docs/
        cp .github/CHANGELOG.md release_assets/docs/
        
        # Create quick install script
        cat > release_assets/quick-install.sh << 'EOF'
        #!/bin/bash
        # RunwayGuard Quick Install Script
        
        echo "üõ´ Installing RunwayGuard Advanced Runway Risk Intelligence..."
        
        # Check Python version
        if ! python3 --version | grep -q "Python 3.[8-9]\|Python 3.1[0-9]"; then
            echo "‚ùå Python 3.8+ required"
            exit 1
        fi
        
        # Install dependencies
        pip3 install -r requirements.txt
        
        # Setup environment
        if [ ! -f .env ]; then
            cp .env.example .env
            echo "‚ö†Ô∏è Please configure .env file with your API keys"
        fi
        
        echo "‚úÖ RunwayGuard installation complete!"
        echo "üöÄ Start with: uvicorn main:app --reload"
        EOF
        
        chmod +x release_assets/quick-install.sh
        
        # Generate checksums
        cd release_assets
        sha256sum * > SHA256SUMS
        cd ..
        
        echo "‚úÖ Release assets built"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        name: "RunwayGuard ${{ env.RELEASE_VERSION }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          release_assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in code
      if: github.event_name == 'workflow_dispatch'
      run: |
        # Update version in main.py
        VERSION_NUMBER=$(echo "${{ env.RELEASE_VERSION }}" | sed 's/v//')
        sed -i "s/version=\"[^\"]*\"/version=\"$VERSION_NUMBER\"/" main.py
        
        # Commit version update
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add main.py
        git commit -m "üîñ Bump version to ${{ env.RELEASE_VERSION }}" || true
        git push origin main || true

    - name: Create post-release summary
      run: |
        echo "## üéâ RunwayGuard ${{ env.RELEASE_VERSION }} Released Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Release Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.RELEASE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Date**: $(date -u +"%Y-%m-%d %H:%M UTC")" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Release Assets" >> $GITHUB_STEP_SUMMARY
        echo "- Source code archive" >> $GITHUB_STEP_SUMMARY
        echo "- Quick installation script" >> $GITHUB_STEP_SUMMARY
        echo "- Aviation safety documentation" >> $GITHUB_STEP_SUMMARY
        echo "- SHA256 checksums" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üõ°Ô∏è Safety Validations" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Security vulnerability scan passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Aviation calculation algorithms validated" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Changelog documentation verified" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Release assets generated and checksummed" >> $GITHUB_STEP_SUMMARY

  notify-release:
    needs: create-release
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify release completion
      run: |
        echo "üéâ RunwayGuard release workflow completed"
        echo "Version: ${{ env.RELEASE_VERSION || github.ref_name }}"
        
        # Add notification hooks here (Slack, Discord, email, etc.)
        # Example:
        # curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
        #   -H "Content-Type: application/json" \
        #   -d '{"text": "‚úàÔ∏è RunwayGuard ${{ env.RELEASE_VERSION }} has been released! üöÄ"}' 