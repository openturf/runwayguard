name: Dependabot Auto-merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get Dependabot metadata
      id: metadata
      uses: dependabot/fetch-metadata@v1
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies and security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run security checks on updated dependencies
      run: |
        # Install the PR requirements to check for vulnerabilities
        pip install -r requirements.txt
        
        # Run safety check
        safety check --json --output safety-check.json || echo "Safety check completed"
        
        # Run pip-audit
        pip-audit --desc --format json --output audit-check.json || echo "Audit check completed"

    - name: Analyze security results
      id: security-analysis
      run: |
        python -c "
        import json, sys
        
        security_ok = True
        
        # Check safety results
        try:
            with open('safety-check.json', 'r') as f:
                safety_data = json.load(f)
                if safety_data.get('vulnerabilities'):
                    print('‚ùå Security vulnerabilities found by Safety')
                    security_ok = False
                else:
                    print('‚úÖ No vulnerabilities found by Safety')
        except:
            print('‚ö†Ô∏è Safety check file not found or empty')
        
        # Check audit results
        try:
            with open('audit-check.json', 'r') as f:
                audit_data = json.load(f)
                if audit_data.get('vulnerabilities'):
                    print('‚ùå Security vulnerabilities found by pip-audit')
                    security_ok = False
                else:
                    print('‚úÖ No vulnerabilities found by pip-audit')
        except:
            print('‚ö†Ô∏è Audit check file not found or empty')
        
        if security_ok:
            print('::set-output name=security_ok::true')
        else:
            print('::set-output name=security_ok::false')
            sys.exit(1)
        "

    - name: Check if safe to auto-merge
      id: auto-merge-check
      run: |
        # Only auto-merge patch updates for non-critical packages
        UPDATE_TYPE="${{ steps.metadata.outputs.update-type }}"
        PACKAGE_NAME="${{ steps.metadata.outputs.dependency-names }}"
        
        echo "Update type: $UPDATE_TYPE"
        echo "Package: $PACKAGE_NAME"
        
        # Critical packages that should never auto-merge
        CRITICAL_PACKAGES="fastapi uvicorn httpx openai redis numpy"
        
        SAFE_TO_MERGE=false
        
        # Only patch updates are considered for auto-merge
        if [ "$UPDATE_TYPE" = "version-update:semver-patch" ]; then
          # Check if package is in critical list
          if echo "$CRITICAL_PACKAGES" | grep -q "$PACKAGE_NAME"; then
            echo "‚ö†Ô∏è Critical package $PACKAGE_NAME - requires manual review"
            SAFE_TO_MERGE=false
          else
            echo "‚úÖ Non-critical patch update - safe for auto-merge"
            SAFE_TO_MERGE=true
          fi
        else
          echo "‚ö†Ô∏è Non-patch update ($UPDATE_TYPE) - requires manual review"
          SAFE_TO_MERGE=false
        fi
        
        echo "safe_to_merge=$SAFE_TO_MERGE" >> $GITHUB_OUTPUT

    - name: Run minimal tests
      if: steps.auto-merge-check.outputs.safe_to_merge == 'true' && steps.security-analysis.outputs.security_ok == 'true'
      run: |
        # Run basic import tests to ensure packages work
        python -c "
        try:
            from functions.core_calculations import calculate_rri, wind_components
            from functions.weather_fetcher import fetch_metar
            print('‚úÖ Core imports successful')
        except Exception as e:
            print(f'‚ùå Import test failed: {e}')
            exit(1)
        "

    - name: Auto-approve PR
      if: steps.auto-merge-check.outputs.safe_to_merge == 'true' && steps.security-analysis.outputs.security_ok == 'true'
      run: gh pr review --approve "$PR_URL"
      env:
        PR_URL: ${{ github.event.pull_request.html_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Enable auto-merge
      if: steps.auto-merge-check.outputs.safe_to_merge == 'true' && steps.security-analysis.outputs.security_ok == 'true'
      run: gh pr merge --auto --squash "$PR_URL"
      env:
        PR_URL: ${{ github.event.pull_request.html_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Add safety comment
      if: steps.auto-merge-check.outputs.safe_to_merge == 'true' && steps.security-analysis.outputs.security_ok == 'true'
      run: |
        gh pr comment "$PR_URL" --body "üõ°Ô∏è **RunwayGuard Safety Check Passed**

        ‚úÖ Security vulnerability scan: CLEAR
        ‚úÖ Update type: Patch (safe for auto-merge)
        ‚úÖ Package criticality: Non-critical
        ‚úÖ Basic functionality test: PASSED

        This Dependabot PR has been automatically approved and will merge after CI passes.
        
        *Aviation safety note: Critical packages (FastAPI, Redis, NumPy, etc.) require manual review.*"
      env:
        PR_URL: ${{ github.event.pull_request.html_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Require manual review comment
      if: steps.auto-merge-check.outputs.safe_to_merge != 'true' || steps.security-analysis.outputs.security_ok != 'true'
      run: |
        REASON=""
        if [ "${{ steps.security-analysis.outputs.security_ok }}" != "true" ]; then
          REASON="‚ùå Security vulnerabilities detected"
        elif [ "${{ steps.auto-merge-check.outputs.safe_to_merge }}" != "true" ]; then
          REASON="‚ö†Ô∏è Requires manual review (critical package or non-patch update)"
        fi
        
        gh pr comment "$PR_URL" --body "üîç **Manual Review Required**

        $REASON

        **Update Details:**
        - Package: ${{ steps.metadata.outputs.dependency-names }}
        - Update type: ${{ steps.metadata.outputs.update-type }}
        - Security check: ${{ steps.security-analysis.outputs.security_ok }}

        This PR requires manual review before merging to ensure aviation safety standards.
        
        Please review the changes and security implications before approving."
      env:
        PR_URL: ${{ github.event.pull_request.html_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 