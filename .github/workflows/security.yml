name: Security Scans

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run Safety (PyPI vulnerability scanner)
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true

    - name: Run pip-audit (Python package auditor)
      run: |
        pip-audit --desc --output audit-report.json --format json || true

    - name: Upload dependency scan reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-reports
        path: |
          safety-report.json
          audit-report.json

  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  aviation-security-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit[toml]

    - name: Run aviation-specific security checks
      run: |
        # Check for hardcoded API keys or sensitive aviation data
        echo "🔍 Checking for aviation-specific security issues..."
        
        # Bandit with custom rules for aviation software
        bandit -r . -f json -o bandit-aviation.json \
          -ll -i B101,B601 \
          --skip B108,B113,B404,B603,B607
        
        # Check for common aviation security patterns
        python -c "
        import os, re, json
        
        security_issues = []
        aviation_patterns = [
            (r'api[_-]?key.*=.*[\"\']\w+', 'Potential hardcoded API key'),
            (r'faa[_-]?key', 'Potential FAA API key exposure'),
            (r'password.*=.*[\"\']\w+', 'Potential hardcoded password'),
            (r'secret.*=.*[\"\']\w+', 'Potential hardcoded secret'),
            (r'token.*=.*[\"\']\w+', 'Potential hardcoded token'),
        ]
        
        for root, dirs, files in os.walk('.'):
            # Skip .git and other hidden directories
            dirs[:] = [d for d in dirs if not d.startswith('.')]
            
            for file in files:
                if file.endswith(('.py', '.yml', '.yaml', '.json', '.md')):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read()
                            for pattern, description in aviation_patterns:
                                matches = re.finditer(pattern, content, re.IGNORECASE)
                                for match in matches:
                                    security_issues.append({
                                        'file': filepath,
                                        'line': content[:match.start()].count('\n') + 1,
                                        'issue': description,
                                        'pattern': match.group()
                                    })
                    except:
                        pass
        
        if security_issues:
            print('⚠️ Aviation security issues found:')
            for issue in security_issues:
                print(f\"  {issue['file']}:{issue['line']} - {issue['issue']}\")
            
            with open('aviation-security-issues.json', 'w') as f:
                json.dump(security_issues, f, indent=2)
        else:
            print('✅ No aviation-specific security issues found')
        "

    - name: Upload aviation security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: aviation-security-report
        path: |
          bandit-aviation.json
          aviation-security-issues.json

  container-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: |
        docker build -t runwayguard:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'runwayguard:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  license-compliance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install license checking tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses licensecheck

    - name: Check Python package licenses
      run: |
        pip install -r requirements.txt
        pip-licenses --format json --output-file python-licenses.json
        
        # Check for problematic licenses
        pip-licenses --fail-on GPL --fail-on AGPL

    - name: Generate license report
      run: |
        echo "# License Compliance Report" > license-report.md
        echo "" >> license-report.md
        echo "## Python Dependencies" >> license-report.md
        pip-licenses --format markdown >> license-report.md

    - name: Upload license compliance report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: license-compliance-report
        path: |
          python-licenses.json
          license-report.md 